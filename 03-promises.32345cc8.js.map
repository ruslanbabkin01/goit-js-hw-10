{"mappings":"oeAQA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAMC,SAASC,cAAc,SAqBnC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,GACFI,EAAQ,uBAAuBN,QAAeC,OAEhDM,EAAO,sBAAsBP,QAAeC,MAAU,GACrDA,EAAM,G,CA7BbL,EAAIa,iBAAiB,UAErB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAMC,EAAYC,OAAOjB,EAAIkB,KAAKC,OAC5BC,EAAcH,OAAOjB,EAAIqB,OAAOF,OACtC,IAAId,EAAQY,OAAOjB,EAAIK,MAAMc,OAE7B,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAaE,GAAK,EAAG,CAGvCnB,EAFiBmB,EAAI,EAEGjB,GACrBkB,MAAKb,GAAWZ,EAAA0B,OAAOC,QAAQf,KAC/BgB,OAAMf,GAAUb,EAAA0B,OAAOG,QAAQhB,KAElCN,GAASW,C","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення\n// затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в\n// поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay),\n//   введену користувачем, і крок(step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n//  Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//  Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ref = document.querySelector('.form');\nref.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const stepValue = Number(ref.step.value);\n  const amountValue = Number(ref.amount.value);\n  let delay = Number(ref.delay.value);\n\n  for (let i = 0; i < amountValue; i += 1) {\n    const position = i + 1;\n\n    createPromise(position, delay)\n      .then(resolve => Notify.success(resolve))\n      .catch(reject => Notify.failure(reject));\n\n    delay += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$ref","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","stepValue","Number","step","value","amountValue","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.32345cc8.js.map"}